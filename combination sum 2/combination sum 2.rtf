{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public List<List<Integer>> combinationSum2(int[] candidates, int target) \{\
        Arrays.sort(candidates);\
        List<List<Integer>> res = new ArrayList();\
        List<Integer> tmp = new ArrayList();\
        boolean[] visited= new boolean[candidates.length];\
        \
        backtracking(res, tmp, candidates, target, visited, 0);\
        return res;\
    \}\
    \
    public void backtracking(List<List<Integer>> res, List<Integer> tmp, int[] candidates, int target, boolean[] visited, int start)\
    \{\
        if(target < 0) return;\
        else if(target == 0) \
        \{\
                res.add(new ArrayList(tmp));\
        \}\
        else\
        \{\
            for(int i = start; i < candidates.length; i++)\
            \{\
                if(visited[i]) continue;\
                else\
                \{\
                    if(i > start && candidates[i] == candidates[i - 1]) continue;\
                    tmp.add(candidates[i]);\
                    visited[i] = true;\
                    backtracking(res, tmp, candidates, target - candidates[i], visited, i + 1);\
                    visited[i] = false;\
                    tmp.remove(tmp.size() - 1);\
                \}\
            \}\
        \}\
    \}\
\}}