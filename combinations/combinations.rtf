{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public List<List<Integer>> combine(int n, int k) \{\
        List<List<Integer>> res = new ArrayList();\
        List<Integer> tmp = new ArrayList();\
        backtracking(res, tmp, n, k, 1);\
        return res;\
    \}\
    \
    public void backtracking(List<List<Integer>> res, List<Integer> tmp, int n, int remain, int start)\
    \{\
        if(remain < 0) return;\
        else if(remain == 0) res.add(new ArrayList(tmp));\
        else\
        \{\
            for(int i = start; i <= n; i++)\
            \{\
                tmp.add(i);\
                backtracking(res, tmp, n, remain - 1, i + 1);\
                tmp.remove(tmp.size() - 1);\
            \}\
        \}\
    \}\
\}}