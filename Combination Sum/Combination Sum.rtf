{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public List<List<Integer>> combinationSum(int[] candidates, int target) \{\
        Arrays.sort(candidates);\
        List<List<Integer>> result = new ArrayList<List<Integer>>();\
        List<Integer> tmp = new ArrayList<Integer>();\
        helper(result, 0, target, tmp, candidates);\
        return result;\
    \}\
    \
    public void helper(List<List<Integer>> result, int start, int target, List<Integer> tmp, int[] candidates)\
    \{\
        if(target < 0) return;\
        else if(target == 0) result.add(new ArrayList<Integer>(tmp));\
        else \
        \{\
            for(int i = start; i < candidates.length; i++)\
            \{\
                tmp.add(candidates[i]);\
                helper(result, i, target - candidates[i], tmp, candidates);\
                tmp.remove(tmp.size() - 1);\
            \}\
        \}\
    \}\
\}}