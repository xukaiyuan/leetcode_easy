{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public int uniquePathsWithObstacles(int[][] obstacleGrid) \{\
        int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];\
        if(obstacleGrid[0][0] == 1) return 0;\
        else dp[0][0] = 1;\
        for(int i = 0; i < obstacleGrid[0].length; i++)\
        \{\
            if((obstacleGrid[0][i] == 1)) break;\
            else dp[0][i] = 1;\
        \}\
        \
        for(int i = 0; i < obstacleGrid.length; i++)\
        \{\
            if((obstacleGrid[i][0] == 1)) break;\
            else dp[i][0] = 1;\
        \}\
        \
        \
        \
        for(int i = 1; i < obstacleGrid.length; i++)\
        \{\
            for(int j = 1; j < obstacleGrid[0].length; j++)\
            \{\
                if(i == 0 && j == 0) continue;\
                if(obstacleGrid[i][j] == 1) dp[i][j] = 0;\
                else dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\
            \}\
        \}\
        return dp[obstacleGrid.length - 1][obstacleGrid[0].length - 1];\
    \}\
\}}