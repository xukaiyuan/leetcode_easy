{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public List<List<Integer>> combinationSum3(int k, int n) \{\
        List<List<Integer>> res = new ArrayList();\
        List<Integer> tmp = new ArrayList();\
        int[] nums = new int[9];\
        for(int i = 1; i < 10; i++)\
        \{\
            nums[i - 1] = i;\
        \}\
        backtracking(res, tmp, nums, 0, k, n);\
        return res;\
    \}\
    \
    public void backtracking(List<List<Integer>> res, List<Integer> tmp, int[] nums, int start, int k, int n)\
    \{\
        if(k < 0) return;\
        if(n < 0) return;\
        else if(n == 0 && k == 0) res.add(new ArrayList(tmp));\
        else\
        \{\
            for(int i = start; i < nums.length; i++)\
            \{\
                tmp.add(nums[i]);\
                backtracking(res, tmp, nums, i + 1, k - 1, n - nums[i]);\
                tmp.remove(tmp.size() - 1);\
            \}\
        \}\
    \}\
\}}