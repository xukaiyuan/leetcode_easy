{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
class Solution \{\
    public List<List<Integer>> levelOrderBottom(TreeNode root) \{\
        List<List<Integer>> re = \
\
        List<List<Integer>> tre = new ArrayList<>();\
        if(root == null) return re;\
        Queue <TreeNode> q = new LinkedList<TreeNode>();\
        q.add(root);\
        \
        while(!q.isEmpty())\
        \{\
            List<Integer> level = new ArrayList();\
            int size = q.size();\
            for(int i = 0; i < size; i++)\
            \{\
                TreeNode tmp = q.remove();\
                level.add(tmp.val);\
                if(tmp.left != null) q.add(tmp.left);\
                if(tmp.right != null) q.add(tmp.right);\
            \}.  \
            re.add(level);\
        \}\
        for(int i = re.size() - 1; i > -1; i--)\
        \{\
            tre.add(re.get(i));\
        \}\
        return tre;\
    \}\
\}}