{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl580\partightenfactor0

\f0\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
class Solution \{\
    public List<String> binaryTreePaths(TreeNode root) \{\
        List<String> s = new ArrayList<String>();\
        if(root != null) searchPath(root, "", s);\
        return s;\
       \
    \}\
    \
    public void searchPath(TreeNode root, String path, List<String> s)\
    \{\
        if(root.left == null && root.right == null) s.add(path + root.val);\
        if(root.left != null) searchPath(root.left, path + root.val + "->", s);\
        if(root.right != null) searchPath(root.right, path + root.val + "->", s);\
        \
    \}\
\}}