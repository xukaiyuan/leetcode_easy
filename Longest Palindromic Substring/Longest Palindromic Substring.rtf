{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public String longestPalindrome(String s) \{\
        boolean [][] dp = new boolean[s.length()][s.length()];\
        for(int i = 0; i < s.length(); i++)\
        \{\
            dp[i][i] = true;\
        \}\
        int [] index = new int[2];\
        int len = 1;\
        for(int i = s.length() - 2; i > -1; i--)\
        \{\
        for(int j = i + 1; j < s.length(); j++)\
        \{\
            if(j == i + 1) dp[i][j] = (s.charAt(i) == s.charAt(j));\
            else dp[i][j] = dp[i + 1][j - 1] && (s.charAt(i) == s.charAt(j));\
            if(dp[i][j]) \
            \{\
                if(j - i + 1 > len) \
                \{\
                    len = j - i + 1;\
                    index[0] = i;\
                    index[1] = j;\
                \}\
            \}\
        \}\
        \}\
       \
        return s.substring(index[0], index[1] + 1);\
        \
    \}\
\}}