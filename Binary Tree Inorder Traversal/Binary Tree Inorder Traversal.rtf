{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
class Solution \{\
    public List<Integer> inorderTraversal(TreeNode root) \{\
        List<Integer> res = new ArrayList<Integer>();\
        helper(root, res);\
        return res;\
    \}\
    \
    public void helper(TreeNode root, List<Integer> res)\
    \{\
        if(root != null)\
        \{\
            if(root.left != null)\
            \{\
                helper(root.left, res);\
            \}\
            res.add(root.val);\
            if(root.right != null)\
            \{\
                helper(root.right, res);\
            \}\
            \
        \}\
        \
    \}\
\}\
\
\
\
\
/**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
class Solution \{\
    public List<Integer> inorderTraversal(TreeNode root) \{\
        List<Integer> res = new ArrayList<Integer>();\
        Stack<TreeNode> s = new Stack<TreeNode>();\
        \
        TreeNode cur = root;\
        while(cur != null || !s.isEmpty())\
        \{\
            while(cur != null)\
            \{\
                s.push(cur);\
                cur = cur.left;\
            \}\
            cur = s.pop();\
            res.add(cur.val);\
            cur = cur.right;\
        \}\
        return res;\
    \}\
\}}