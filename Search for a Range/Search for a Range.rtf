{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public int[] searchRange(int[] nums, int target) \{\
        int [] re = new int[2];\
        int l = 0;\
        int r = nums.length - 1;\
        while(l <= r)\
        \{\
            int mid = (r - l) / 2 + l;\
            if(nums[mid] >= target) r = mid - 1;\
            else if(nums[mid] < target) l = mid + 1;\
        \}\
        if(l < nums.length && target == nums[l]) \
            re[0] = l;\
        else\
        \{\
            re[0] = -1;\
            re[1] = -1;\
            return re;\
        \}\
\
        r = nums.length - 1;\
        while(l <= r)\
        \{\
            int mid = (r - l) / 2 + l;\
            \
            if(nums[mid] > target) r = mid - 1;\
            else if(nums[mid] <= target) l = mid + 1;\
        \}\
        re[1] = r;\
        return re;\
    \}\
\}}